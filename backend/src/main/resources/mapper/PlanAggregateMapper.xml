<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.bob.mta.modules.plan.persistence.PlanAggregateMapper">

    <resultMap id="PlanEntityResult" type="com.bob.mta.modules.plan.persistence.PlanEntity">
        <id column="plan_id" property="id"/>
        <result column="tenant_id" property="tenantId"/>
        <result column="customer_id" property="customerId"/>
        <result column="owner_id" property="owner"/>
        <result column="title" property="title"/>
        <result column="description" property="description"/>
        <result column="status" property="status" javaType="com.bob.mta.modules.plan.domain.PlanStatus"/>
        <result column="planned_start_time" property="plannedStartTime"/>
        <result column="planned_end_time" property="plannedEndTime"/>
        <result column="actual_start_time" property="actualStartTime"/>
        <result column="actual_end_time" property="actualEndTime"/>
        <result column="cancel_reason" property="cancelReason"/>
        <result column="canceled_by" property="canceledBy"/>
        <result column="canceled_at" property="canceledAt"/>
        <result column="timezone" property="timezone"/>
        <result column="created_at" property="createdAt"/>
        <result column="updated_at" property="updatedAt"/>
        <result column="reminder_updated_at" property="reminderUpdatedAt"/>
        <result column="reminder_updated_by" property="reminderUpdatedBy"/>
    </resultMap>

    <resultMap id="PlanParticipantResult" type="com.bob.mta.modules.plan.persistence.PlanParticipantEntity">
        <id column="plan_id" property="planId"/>
        <result column="participant_id" property="participantId"/>
    </resultMap>

    <resultMap id="PlanNodeResult" type="com.bob.mta.modules.plan.persistence.PlanNodeEntity">
        <id column="node_id" property="nodeId"/>
        <result column="plan_id" property="planId"/>
        <result column="parent_node_id" property="parentNodeId"/>
        <result column="name" property="name"/>
        <result column="type" property="type"/>
        <result column="assignee" property="assignee"/>
        <result column="order_index" property="orderIndex"/>
        <result column="expected_duration_minutes" property="expectedDurationMinutes"/>
        <result column="action_type" property="actionType" javaType="com.bob.mta.modules.plan.domain.PlanNodeActionType"/>
        <result column="completion_threshold" property="completionThreshold"/>
        <result column="action_ref" property="actionRef"/>
        <result column="description" property="description"/>
    </resultMap>

    <resultMap id="PlanExecutionResult" type="com.bob.mta.modules.plan.persistence.PlanNodeExecutionEntity">
        <id column="plan_id" property="planId"/>
        <result column="node_id" property="nodeId"/>
        <result column="status" property="status" javaType="com.bob.mta.modules.plan.domain.PlanNodeStatus"/>
        <result column="start_time" property="startTime"/>
        <result column="end_time" property="endTime"/>
        <result column="operator_id" property="operator"/>
        <result column="result_summary" property="result"/>
        <result column="execution_log" property="log"/>
    </resultMap>

    <resultMap id="PlanAttachmentResult" type="com.bob.mta.modules.plan.persistence.PlanNodeAttachmentEntity">
        <id column="plan_id" property="planId"/>
        <result column="node_id" property="nodeId"/>
        <result column="file_id" property="fileId"/>
    </resultMap>

    <resultMap id="PlanActivityResult" type="com.bob.mta.modules.plan.persistence.PlanActivityEntity">
        <id column="activity_id" property="activityId"/>
        <result column="plan_id" property="planId"/>
        <result column="activity_type" property="type" javaType="com.bob.mta.modules.plan.domain.PlanActivityType"/>
        <result column="occurred_at" property="occurredAt"/>
        <result column="actor_id" property="actor"/>
        <result column="message_key" property="message"/>
        <result column="reference_id" property="referenceId"/>
        <result column="attributes" property="attributes"
                typeHandler="com.bob.mta.common.mybatis.StringMapJsonTypeHandler"/>
    </resultMap>

    <resultMap id="PlanReminderRuleResult" type="com.bob.mta.modules.plan.persistence.PlanReminderRuleEntity">
        <id column="rule_id" property="ruleId"/>
        <result column="plan_id" property="planId"/>
        <result column="trigger" property="trigger" javaType="com.bob.mta.modules.plan.domain.PlanReminderTrigger"/>
        <result column="offset_minutes" property="offsetMinutes"/>
        <result column="channels" property="channels"
                typeHandler="com.bob.mta.common.mybatis.StringListJsonTypeHandler"/>
        <result column="template_id" property="templateId"/>
        <result column="recipients" property="recipients"
                typeHandler="com.bob.mta.common.mybatis.StringListJsonTypeHandler"/>
        <result column="description" property="description"/>
        <result column="active" property="active"/>
    </resultMap>

    <resultMap id="PlanStatusCountResult" type="com.bob.mta.modules.plan.persistence.PlanStatusCountEntity">
        <result column="status" property="status" javaType="com.bob.mta.modules.plan.domain.PlanStatus"/>
        <result column="total" property="total"/>
    </resultMap>

    <resultMap id="PlanUpcomingResult" type="com.bob.mta.modules.plan.persistence.PlanUpcomingPlanEntity">
        <id column="plan_id" property="planId"/>
        <result column="title" property="title"/>
        <result column="status" property="status" javaType="com.bob.mta.modules.plan.domain.PlanStatus"/>
        <result column="planned_start_time" property="plannedStartTime"/>
        <result column="planned_end_time" property="plannedEndTime"/>
        <result column="owner_id" property="ownerId"/>
        <result column="customer_id" property="customerId"/>
        <result column="completed_nodes" property="completedNodes"/>
        <result column="total_nodes" property="totalNodes"/>
    </resultMap>

    <resultMap id="PlanOwnerLoadResult" type="com.bob.mta.modules.plan.persistence.PlanOwnerLoadEntity">
        <result column="owner_id" property="ownerId"/>
        <result column="total_plans" property="totalPlans"/>
        <result column="active_plans" property="activePlans"/>
        <result column="overdue_plans" property="overduePlans"/>
    </resultMap>

    <resultMap id="PlanRiskPlanResult" type="com.bob.mta.modules.plan.persistence.PlanRiskPlanEntity">
        <id column="plan_id" property="planId"/>
        <result column="title" property="title"/>
        <result column="status" property="status" javaType="com.bob.mta.modules.plan.domain.PlanStatus"/>
        <result column="planned_end_time" property="plannedEndTime"/>
        <result column="owner_id" property="ownerId"/>
        <result column="customer_id" property="customerId"/>
        <result column="risk_level" property="riskLevel"/>
        <result column="minutes_until_due" property="minutesUntilDue"/>
        <result column="minutes_overdue" property="minutesOverdue"/>
    </resultMap>

    <resultMap id="PlanBoardCustomerAggregateResult" type="com.bob.mta.modules.plan.persistence.PlanBoardCustomerAggregateEntity">
        <result column="customer_id" property="customerId"/>
        <result column="customer_name" property="customerName"/>
        <result column="total_plans" property="totalPlans"/>
        <result column="active_plans" property="activePlans"/>
        <result column="completed_plans" property="completedPlans"/>
        <result column="overdue_plans" property="overduePlans"/>
        <result column="due_soon_plans" property="dueSoonPlans"/>
        <result column="average_progress" property="averageProgress"/>
        <result column="earliest_start" property="earliestStart"/>
        <result column="latest_end" property="latestEnd"/>
    </resultMap>

    <resultMap id="PlanBoardTimeBucketResult" type="com.bob.mta.modules.plan.persistence.PlanBoardTimeBucketEntity">
        <result column="bucket_id" property="bucketId"/>
        <result column="bucket_start" property="start"/>
        <result column="bucket_end" property="end"/>
        <result column="total_plans" property="totalPlans"/>
        <result column="active_plans" property="activePlans"/>
        <result column="completed_plans" property="completedPlans"/>
        <result column="overdue_plans" property="overduePlans"/>
        <result column="due_soon_plans" property="dueSoonPlans"/>
    </resultMap>

    <resultMap id="PlanBoardPlanResult" type="com.bob.mta.modules.plan.persistence.PlanBoardPlanEntity">
        <id column="plan_id" property="planId"/>
        <result column="title" property="title"/>
        <result column="status" property="status" javaType="com.bob.mta.modules.plan.domain.PlanStatus"/>
        <result column="owner_id" property="ownerId"/>
        <result column="customer_id" property="customerId"/>
        <result column="planned_start_time" property="plannedStartTime"/>
        <result column="planned_end_time" property="plannedEndTime"/>
        <result column="timezone" property="timezone"/>
        <result column="progress" property="progress"/>
        <result column="overdue" property="overdue"/>
        <result column="due_soon" property="dueSoon"/>
        <result column="minutes_until_due" property="minutesUntilDue"/>
        <result column="minutes_overdue" property="minutesOverdue"/>
    </resultMap>

    <select id="findPlans" parameterType="com.bob.mta.modules.plan.persistence.PlanQueryParameters"
            resultMap="PlanEntityResult">
        SELECT plan_id,
               tenant_id,
               customer_id,
               owner_id,
               title,
               description,
               status,
               planned_start_time,
               planned_end_time,
               actual_start_time,
               actual_end_time,
               cancel_reason,
               canceled_by,
               canceled_at,
               timezone,
               created_at,
               updated_at,
               reminder_updated_at,
               reminder_updated_by
        FROM mt_plan
        <where>
            <if test="tenantId != null">
                tenant_id = #{tenantId}
            </if>
            <if test="customerIds != null and !customerIds.isEmpty()">
                AND customer_id IN
                <foreach collection="customerIds" item="cid" open="(" separator="," close=")">
                    #{cid}
                </foreach>
            </if>
            <if test="(customerIds == null or customerIds.isEmpty()) and customerId != null">
                AND customer_id = #{customerId}
            </if>
            <if test="owner != null">
                AND owner_id = #{owner}
            </if>
            <if test="keyword != null and keyword != ''">
                AND (
                title ILIKE CONCAT('%', #{keyword}, '%')
                OR description ILIKE CONCAT('%', #{keyword}, '%')
                )
            </if>
            <if test="status != null">
                AND status = #{status}
            </if>
            <if test="statuses != null and !statuses.isEmpty()">
                AND status IN
                <foreach collection="statuses" item="status" open="(" separator="," close=")">
                    #{status}
                </foreach>
            </if>
            <if test="plannedStartFrom != null">
                AND planned_end_time &gt;= #{plannedStartFrom}
            </if>
            <if test="plannedEndTo != null">
                AND planned_start_time &lt;= #{plannedEndTo}
            </if>
            <if test="excludePlanId != null">
                AND plan_id != #{excludePlanId}
            </if>
        </where>
        ORDER BY planned_start_time NULLS LAST, plan_id
        <if test="limit != null">
            LIMIT #{limit}
        </if>
        <if test="offset != null">
            OFFSET #{offset}
        </if>
    </select>

    <select id="countPlans" parameterType="com.bob.mta.modules.plan.persistence.PlanQueryParameters" resultType="int">
        SELECT COUNT(1)
        FROM mt_plan
        <where>
            <if test="tenantId != null">
                tenant_id = #{tenantId}
            </if>
            <if test="customerIds != null and !customerIds.isEmpty()">
                AND customer_id IN
                <foreach collection="customerIds" item="cid" open="(" separator="," close=")">
                    #{cid}
                </foreach>
            </if>
            <if test="(customerIds == null or customerIds.isEmpty()) and customerId != null">
                AND customer_id = #{customerId}
            </if>
            <if test="owner != null">
                AND owner_id = #{owner}
            </if>
            <if test="keyword != null and keyword != ''">
                AND (
                title ILIKE CONCAT('%', #{keyword}, '%')
                OR description ILIKE CONCAT('%', #{keyword}, '%')
                )
            </if>
            <if test="status != null">
                AND status = #{status}
            </if>
            <if test="statuses != null and !statuses.isEmpty()">
                AND status IN
                <foreach collection="statuses" item="status" open="(" separator="," close=")">
                    #{status}
                </foreach>
            </if>
            <if test="plannedStartFrom != null">
                AND planned_end_time &gt;= #{plannedStartFrom}
            </if>
            <if test="plannedEndTo != null">
                AND planned_start_time &lt;= #{plannedEndTo}
            </if>
            <if test="excludePlanId != null">
                AND plan_id != #{excludePlanId}
            </if>
        </where>
    </select>

    <select id="countPlansByStatus" parameterType="com.bob.mta.modules.plan.persistence.PlanAnalyticsQueryParameters"
            resultMap="PlanStatusCountResult">
        SELECT status,
               COUNT(1) AS total
        FROM mt_plan
        <where>
            <if test="tenantId != null">
                tenant_id = #{tenantId}
            </if>
            <if test="customerId != null">
                AND customer_id = #{customerId}
            </if>
            <if test="ownerId != null">
                AND owner_id = #{ownerId}
            </if>
            <if test="plannedStartFrom != null">
                AND planned_end_time &gt;= #{plannedStartFrom}
            </if>
            <if test="plannedEndTo != null">
                AND planned_start_time &lt;= #{plannedEndTo}
            </if>
            <if test="statuses != null and !statuses.isEmpty()">
                AND status IN
                <foreach collection="statuses" item="status" open="(" separator="," close=")">
                    #{status}
                </foreach>
            </if>
        </where>
        GROUP BY status
    </select>

    <select id="countOverduePlans" parameterType="com.bob.mta.modules.plan.persistence.PlanAnalyticsQueryParameters"
            resultType="long">
        SELECT COUNT(1)
        FROM mt_plan
        <where>
            <if test="tenantId != null">
                tenant_id = #{tenantId}
            </if>
            <if test="customerId != null">
                AND customer_id = #{customerId}
            </if>
            <if test="ownerId != null">
                AND owner_id = #{ownerId}
            </if>
            <if test="plannedStartFrom != null">
                AND planned_end_time &gt;= #{plannedStartFrom}
            </if>
            <if test="plannedEndTo != null">
                AND planned_start_time &lt;= #{plannedEndTo}
            </if>
            <if test="statuses != null and !statuses.isEmpty()">
                AND status IN
                <foreach collection="statuses" item="status" open="(" separator="," close=")">
                    #{status}
                </foreach>
            </if>
            AND status IN ('SCHEDULED', 'IN_PROGRESS')
            AND planned_end_time IS NOT NULL
            AND planned_end_time &lt; #{referenceTime}
        </where>
    </select>

    <select id="findUpcomingPlans" parameterType="com.bob.mta.modules.plan.persistence.PlanAnalyticsQueryParameters"
            resultMap="PlanUpcomingResult">
        SELECT p.plan_id,
               p.title,
               p.status,
               p.planned_start_time,
               p.planned_end_time,
               p.owner_id,
               p.customer_id,
               COALESCE(progress.completed_nodes, 0) AS completed_nodes,
               COALESCE(progress.total_nodes, 0)     AS total_nodes
        FROM mt_plan p
                 LEFT JOIN (
            SELECT plan_id,
                   SUM(CASE WHEN status = 'DONE' THEN 1 ELSE 0 END) AS completed_nodes,
                   COUNT(*)                                         AS total_nodes
            FROM mt_plan_node_execution
            GROUP BY plan_id
        ) progress ON progress.plan_id = p.plan_id
        <where>
            <if test="tenantId != null">
                p.tenant_id = #{tenantId}
            </if>
            <if test="customerId != null">
                AND p.customer_id = #{customerId}
            </if>
            <if test="ownerId != null">
                AND p.owner_id = #{ownerId}
            </if>
            <if test="plannedStartFrom != null">
                AND p.planned_end_time &gt;= #{plannedStartFrom}
            </if>
            <if test="plannedEndTo != null">
                AND p.planned_start_time &lt;= #{plannedEndTo}
            </if>
            <if test="statuses != null and !statuses.isEmpty()">
                AND p.status IN
                <foreach collection="statuses" item="status" open="(" separator="," close=")">
                    #{status}
                </foreach>
            </if>
            AND p.status NOT IN ('CANCELED', 'COMPLETED')
            AND p.planned_start_time IS NOT NULL
            AND p.planned_start_time &gt;= #{referenceTime}
        </where>
        ORDER BY p.planned_start_time
        <if test="upcomingLimit != null">
            LIMIT #{upcomingLimit}
        </if>
    </select>

    <select id="findOwnerLoads" parameterType="com.bob.mta.modules.plan.persistence.PlanAnalyticsQueryParameters"
            resultMap="PlanOwnerLoadResult">
        SELECT owner_id,
               COUNT(1)                                                   AS total_plans,
               SUM(CASE WHEN status IN ('SCHEDULED', 'IN_PROGRESS') THEN 1 ELSE 0 END) AS active_plans,
               SUM(CASE
                       WHEN status IN ('SCHEDULED', 'IN_PROGRESS')
                           AND planned_end_time IS NOT NULL
                           AND planned_end_time &lt; #{referenceTime}
                           THEN 1
                       ELSE 0 END)                                        AS overdue_plans
        FROM mt_plan
        <where>
            owner_id IS NOT NULL
            <if test="tenantId != null">
                AND tenant_id = #{tenantId}
            </if>
            <if test="customerId != null">
                AND customer_id = #{customerId}
            </if>
            <if test="ownerId != null">
                AND owner_id = #{ownerId}
            </if>
            <if test="plannedStartFrom != null">
                AND planned_end_time &gt;= #{plannedStartFrom}
            </if>
            <if test="plannedEndTo != null">
                AND planned_start_time &lt;= #{plannedEndTo}
            </if>
            <if test="statuses != null and !statuses.isEmpty()">
                AND status IN
                <foreach collection="statuses" item="status" open="(" separator="," close=")">
                    #{status}
                </foreach>
            </if>
        </where>
        GROUP BY owner_id
        ORDER BY active_plans DESC, overdue_plans DESC, owner_id
        <if test="ownerLimit != null">
            LIMIT #{ownerLimit}
        </if>
    </select>

    <select id="findRiskPlans" parameterType="com.bob.mta.modules.plan.persistence.PlanAnalyticsQueryParameters"
            resultMap="PlanRiskPlanResult">
        SELECT p.plan_id,
               p.title,
               p.status,
               p.planned_end_time,
               p.owner_id,
               p.customer_id,
               CASE
                   WHEN p.planned_end_time &lt; #{referenceTime} THEN 'OVERDUE'
                   WHEN p.planned_end_time &gt;= #{referenceTime}
                       AND p.planned_end_time &lt; #{dueSoonThreshold} THEN 'DUE_SOON'
                   ELSE NULL
                   END AS risk_level,
               CASE
                   WHEN p.planned_end_time &gt;= #{referenceTime}
                       AND p.planned_end_time &lt; #{dueSoonThreshold}
                       THEN EXTRACT(EPOCH FROM (p.planned_end_time - #{referenceTime})) / 60
                   ELSE NULL
                   END AS minutes_until_due,
               CASE
                   WHEN p.planned_end_time &lt; #{referenceTime}
                       THEN EXTRACT(EPOCH FROM (#{referenceTime} - p.planned_end_time)) / 60
                   ELSE NULL
                   END AS minutes_overdue
        FROM mt_plan p
        <where>
            <if test="tenantId != null">
                p.tenant_id = #{tenantId}
            </if>
            <if test="customerId != null">
                AND p.customer_id = #{customerId}
            </if>
            <if test="ownerId != null">
                AND p.owner_id = #{ownerId}
            </if>
            <if test="plannedStartFrom != null">
                AND p.planned_end_time &gt;= #{plannedStartFrom}
            </if>
            <if test="plannedEndTo != null">
                AND p.planned_start_time &lt;= #{plannedEndTo}
            </if>
            <if test="statuses != null and !statuses.isEmpty()">
                AND p.status IN
                <foreach collection="statuses" item="status" open="(" separator="," close=")">
                    #{status}
                </foreach>
            </if>
            AND p.status IN ('SCHEDULED', 'IN_PROGRESS')
            AND p.planned_end_time IS NOT NULL
            AND (
                    p.planned_end_time &lt; #{referenceTime}
                OR (p.planned_end_time &gt;= #{referenceTime} AND p.planned_end_time &lt; #{dueSoonThreshold})
            )
        </where>
        ORDER BY CASE
                     WHEN p.planned_end_time &lt; #{referenceTime} THEN 0
                     ELSE 1 END,
                 p.planned_end_time,
                 p.plan_id
        <if test="riskLimit != null">
            LIMIT #{riskLimit}
        </if>
    </select>

    <select id="aggregateCustomers" parameterType="com.bob.mta.modules.plan.persistence.PlanBoardQueryParameters"
            resultMap="PlanBoardCustomerAggregateResult">
        WITH filtered AS (
            SELECT p.plan_id,
                   p.customer_id,
                   p.status,
                   p.planned_start_time,
                   p.planned_end_time
            FROM mt_plan p
            <where>
                <if test="tenantId != null">
                    p.tenant_id = #{tenantId}
                </if>
                <if test="customerIds != null and !customerIds.isEmpty()">
                    AND p.customer_id IN
                    <foreach collection="customerIds" item="cid" open="(" separator="," close=")">
                        #{cid}
                    </foreach>
                </if>
                <if test="ownerId != null">
                    AND p.owner_id = #{ownerId}
                </if>
                <if test="statuses != null and !statuses.isEmpty()">
                    AND p.status IN
                    <foreach collection="statuses" item="status" open="(" separator="," close=")">
                        #{status}
                    </foreach>
                </if>
                <if test="from != null">
                    AND p.planned_end_time &gt;= #{from}
                </if>
                <if test="to != null">
                    AND p.planned_start_time &lt;= #{to}
                </if>
            </where>
        )
        SELECT COALESCE(filtered.customer_id, 'UNKNOWN') AS customer_id,
               NULL::varchar                             AS customer_name,
               COUNT(1)                                  AS total_plans,
               SUM(CASE WHEN filtered.status IN ('SCHEDULED', 'IN_PROGRESS') THEN 1 ELSE 0 END) AS active_plans,
               SUM(CASE WHEN filtered.status = 'COMPLETED' THEN 1 ELSE 0 END)                  AS completed_plans,
               SUM(CASE
                       WHEN filtered.status IN ('SCHEDULED', 'IN_PROGRESS')
                           AND filtered.planned_end_time IS NOT NULL
                           AND filtered.planned_end_time &lt; #{referenceTime}
                           THEN 1
                       ELSE 0 END)                                                             AS overdue_plans,
               SUM(CASE
                       WHEN filtered.status IN ('SCHEDULED', 'IN_PROGRESS')
                           AND filtered.planned_end_time IS NOT NULL
                           AND filtered.planned_end_time &gt;= #{referenceTime}
                           AND filtered.planned_end_time &lt; #{referenceTime} + make_interval(mins => #{dueSoonMinutes})
                           THEN 1
                       ELSE 0 END)                                                             AS due_soon_plans,
               AVG(COALESCE(progress.progress, 0))                                            AS average_progress,
               MIN(filtered.planned_start_time)                                                AS earliest_start,
               MAX(filtered.planned_end_time)                                                  AS latest_end
        FROM filtered
                 LEFT JOIN (
            SELECT plan_id,
                   CASE
                       WHEN COUNT(*) = 0 THEN 0
                       ELSE ROUND(SUM(CASE WHEN status = 'DONE' THEN 1 ELSE 0 END) * 100.0 / COUNT(*))
                       END AS progress
            FROM mt_plan_node_execution
            GROUP BY plan_id
        ) progress ON progress.plan_id = filtered.plan_id
        GROUP BY COALESCE(filtered.customer_id, 'UNKNOWN')
    </select>

    <select id="aggregateTimeBuckets" parameterType="com.bob.mta.modules.plan.persistence.PlanBoardQueryParameters"
            resultMap="PlanBoardTimeBucketResult">
        WITH filtered AS (
            SELECT p.plan_id,
                   p.status,
                   p.planned_start_time,
                   p.planned_end_time
            FROM mt_plan p
            <where>
                <if test="tenantId != null">
                    p.tenant_id = #{tenantId}
                </if>
                <if test="customerIds != null and !customerIds.isEmpty()">
                    AND p.customer_id IN
                    <foreach collection="customerIds" item="cid" open="(" separator="," close=")">
                        #{cid}
                    </foreach>
                </if>
                <if test="ownerId != null">
                    AND p.owner_id = #{ownerId}
                </if>
                <if test="statuses != null and !statuses.isEmpty()">
                    AND p.status IN
                    <foreach collection="statuses" item="status" open="(" separator="," close=")">
                        #{status}
                    </foreach>
                </if>
                <if test="from != null">
                    AND p.planned_end_time &gt;= #{from}
                </if>
                <if test="to != null">
                    AND p.planned_start_time &lt;= #{to}
                </if>
                AND p.planned_start_time IS NOT NULL
            </where>
        ),
             enriched AS (
                 SELECT filtered.*,
                        CASE
                            WHEN #{grouping} = 'DAY' THEN date_trunc('day', filtered.planned_start_time)
                            WHEN #{grouping} = 'WEEK' THEN date_trunc('week', filtered.planned_start_time)
                            WHEN #{grouping} = 'MONTH' THEN date_trunc('month', filtered.planned_start_time)
                            WHEN #{grouping} = 'YEAR' THEN date_trunc('year', filtered.planned_start_time)
                        END AS bucket_start
                 FROM filtered
             )
        SELECT CASE
                   WHEN #{grouping} = 'DAY' THEN to_char(enriched.bucket_start, 'YYYY-MM-DD')
                   WHEN #{grouping} = 'WEEK' THEN to_char(enriched.bucket_start, 'IYYY-"W"IW')
                   WHEN #{grouping} = 'MONTH' THEN to_char(enriched.bucket_start, 'YYYY-MM')
                   WHEN #{grouping} = 'YEAR' THEN to_char(enriched.bucket_start, 'YYYY')
               END                                                   AS bucket_id,
               enriched.bucket_start                                 AS bucket_start,
               CASE
                   WHEN #{grouping} = 'DAY' THEN enriched.bucket_start + INTERVAL '1 day'
                   WHEN #{grouping} = 'WEEK' THEN enriched.bucket_start + INTERVAL '1 week'
                   WHEN #{grouping} = 'MONTH' THEN enriched.bucket_start + INTERVAL '1 month'
                   WHEN #{grouping} = 'YEAR' THEN enriched.bucket_start + INTERVAL '1 year'
               END                                                   AS bucket_end,
               COUNT(1)                                              AS total_plans,
               SUM(CASE WHEN enriched.status IN ('SCHEDULED', 'IN_PROGRESS') THEN 1 ELSE 0 END) AS active_plans,
               SUM(CASE WHEN enriched.status = 'COMPLETED' THEN 1 ELSE 0 END)                    AS completed_plans,
               SUM(CASE
                       WHEN enriched.status IN ('SCHEDULED', 'IN_PROGRESS')
                           AND enriched.planned_end_time IS NOT NULL
                           AND enriched.planned_end_time &lt; #{referenceTime}
                           THEN 1
                       ELSE 0 END)                                                                AS overdue_plans,
               SUM(CASE
                       WHEN enriched.status IN ('SCHEDULED', 'IN_PROGRESS')
                           AND enriched.planned_end_time IS NOT NULL
                           AND enriched.planned_end_time &gt;= #{referenceTime}
                           AND enriched.planned_end_time &lt; #{referenceTime} + make_interval(mins => #{dueSoonMinutes})
                           THEN 1
                       ELSE 0 END)                                                                AS due_soon_plans
        FROM enriched
        GROUP BY enriched.bucket_start
        ORDER BY enriched.bucket_start
    </select>

    <select id="findPlansForBoard" parameterType="com.bob.mta.modules.plan.persistence.PlanBoardQueryParameters"
            resultMap="PlanBoardPlanResult">
        SELECT p.plan_id,
               p.title,
               p.status,
               p.owner_id,
               p.customer_id,
               p.planned_start_time,
               p.planned_end_time,
               p.timezone,
               COALESCE(progress.progress, 0)                                                     AS progress,
               CASE
                   WHEN p.status IN ('SCHEDULED', 'IN_PROGRESS')
                       AND p.planned_end_time IS NOT NULL
                       AND p.planned_end_time &lt; #{referenceTime}
                       THEN TRUE
                   ELSE FALSE END                                                                  AS overdue,
               CASE
                   WHEN p.status IN ('SCHEDULED', 'IN_PROGRESS')
                       AND p.planned_end_time IS NOT NULL
                       AND p.planned_end_time &gt;= #{referenceTime}
                       AND p.planned_end_time &lt; #{referenceTime} + make_interval(mins => #{dueSoonMinutes})
                       THEN TRUE
                   ELSE FALSE END                                                                  AS due_soon,
               CASE
                   WHEN p.status IN ('SCHEDULED', 'IN_PROGRESS')
                       AND p.planned_end_time IS NOT NULL
                       AND p.planned_end_time &gt;= #{referenceTime}
                       AND p.planned_end_time &lt; #{referenceTime} + make_interval(mins => #{dueSoonMinutes})
                       THEN CAST(EXTRACT(EPOCH FROM (p.planned_end_time - #{referenceTime})) / 60 AS BIGINT)
                   ELSE NULL END                                                                   AS minutes_until_due,
               CASE
                   WHEN p.status IN ('SCHEDULED', 'IN_PROGRESS')
                       AND p.planned_end_time IS NOT NULL
                       AND p.planned_end_time &lt; #{referenceTime}
                       THEN CAST(EXTRACT(EPOCH FROM (#{referenceTime} - p.planned_end_time)) / 60 AS BIGINT)
                   ELSE NULL END                                                                   AS minutes_overdue
        FROM mt_plan p
                 LEFT JOIN (
            SELECT plan_id,
                   CASE
                       WHEN COUNT(*) = 0 THEN 0
                       ELSE ROUND(SUM(CASE WHEN status = 'DONE' THEN 1 ELSE 0 END) * 100.0 / COUNT(*))
                       END AS progress
            FROM mt_plan_node_execution
            GROUP BY plan_id
        ) progress ON progress.plan_id = p.plan_id
        <where>
            <if test="tenantId != null">
                p.tenant_id = #{tenantId}
            </if>
            <if test="customerIds != null and !customerIds.isEmpty()">
                AND p.customer_id IN
                <foreach collection="customerIds" item="cid" open="(" separator="," close=")">
                    #{cid}
                </foreach>
            </if>
            <if test="ownerId != null">
                AND p.owner_id = #{ownerId}
            </if>
            <if test="statuses != null and !statuses.isEmpty()">
                AND p.status IN
                <foreach collection="statuses" item="status" open="(" separator="," close=")">
                    #{status}
                </foreach>
            </if>
            <if test="from != null">
                AND p.planned_end_time &gt;= #{from}
            </if>
            <if test="to != null">
                AND p.planned_start_time &lt;= #{to}
            </if>
        </where>
        ORDER BY p.planned_start_time NULLS LAST, p.plan_id
    </select>

    <select id="findPlanById" parameterType="string" resultMap="PlanEntityResult">
        SELECT plan_id,
               tenant_id,
               customer_id,
               owner_id,
               title,
               description,
               status,
               planned_start_time,
               planned_end_time,
               actual_start_time,
               actual_end_time,
               cancel_reason,
               canceled_by,
               canceled_at,
               timezone,
               created_at,
               updated_at,
               reminder_updated_at,
               reminder_updated_by
        FROM mt_plan
        WHERE plan_id = #{planId}
    </select>

    <select id="findParticipantsByPlanIds" parameterType="list" resultMap="PlanParticipantResult">
        SELECT plan_id, participant_id
        FROM mt_plan_participant
        WHERE plan_id IN
        <foreach collection="planIds" item="planId" open="(" separator="," close=")">
            #{planId}
        </foreach>
        ORDER BY plan_id, participant_id
    </select>

    <select id="findNodesByPlanIds" parameterType="list" resultMap="PlanNodeResult">
        SELECT plan_id,
               node_id,
               parent_node_id,
               name,
               type,
               assignee,
               order_index,
               expected_duration_minutes,
               action_type,
               completion_threshold,
               action_ref,
               description
        FROM mt_plan_node
        WHERE plan_id IN
        <foreach collection="planIds" item="planId" open="(" separator="," close=")">
            #{planId}
        </foreach>
        ORDER BY plan_id, order_index, node_id
    </select>

    <select id="findExecutionsByPlanIds" parameterType="list" resultMap="PlanExecutionResult">
        SELECT plan_id,
               node_id,
               status,
               start_time,
               end_time,
               operator_id,
               result_summary,
               execution_log
        FROM mt_plan_node_execution
        WHERE plan_id IN
        <foreach collection="planIds" item="planId" open="(" separator="," close=")">
            #{planId}
        </foreach>
        ORDER BY plan_id, node_id
    </select>

    <select id="findAttachmentsByPlanIds" parameterType="list" resultMap="PlanAttachmentResult">
        SELECT plan_id, node_id, file_id
        FROM mt_plan_node_attachment
        WHERE plan_id IN
        <foreach collection="planIds" item="planId" open="(" separator="," close=")">
            #{planId}
        </foreach>
        ORDER BY plan_id, node_id, file_id
    </select>

    <select id="findAttachmentsByPlanId" parameterType="string" resultMap="PlanAttachmentResult">
        SELECT plan_id, node_id, file_id
        FROM mt_plan_node_attachment
        WHERE plan_id = #{planId}
        ORDER BY node_id, file_id
    </select>

    <select id="findActivitiesByPlanIds" parameterType="list" resultMap="PlanActivityResult">
        SELECT plan_id,
               activity_id,
               activity_type,
               occurred_at,
               actor_id,
               message_key,
               reference_id,
               attributes
        FROM mt_plan_activity
        WHERE plan_id IN
        <foreach collection="planIds" item="planId" open="(" separator="," close=")">
            #{planId}
        </foreach>
        ORDER BY plan_id, occurred_at, activity_id
    </select>

    <select id="findActivitiesByPlanId" parameterType="string" resultMap="PlanActivityResult">
        SELECT plan_id,
               activity_id,
               activity_type,
               occurred_at,
               actor_id,
               message_key,
               reference_id,
               attributes
        FROM mt_plan_activity
        WHERE plan_id = #{planId}
        ORDER BY occurred_at, activity_id
    </select>

    <select id="findReminderRulesByPlanIds" parameterType="list" resultMap="PlanReminderRuleResult">
        SELECT plan_id,
               rule_id,
               trigger,
               offset_minutes,
               channels,
               template_id,
               recipients,
               description,
               active
        FROM mt_plan_reminder_rule
        WHERE plan_id IN
        <foreach collection="planIds" item="planId" open="(" separator="," close=")">
            #{planId}
        </foreach>
        ORDER BY plan_id, rule_id
    </select>

    <select id="findReminderRulesByPlanId" parameterType="string" resultMap="PlanReminderRuleResult">
        SELECT plan_id,
               rule_id,
               trigger,
               offset_minutes,
               channels,
               template_id,
               recipients,
               description,
               active
        FROM mt_plan_reminder_rule
        WHERE plan_id = #{planId}
        ORDER BY rule_id
    </select>

    <insert id="insertPlan" parameterType="com.bob.mta.modules.plan.persistence.PlanEntity">
        INSERT INTO mt_plan (plan_id, tenant_id, customer_id, owner_id, title, description, status,
                             planned_start_time, planned_end_time, actual_start_time, actual_end_time,
                             cancel_reason, canceled_by, canceled_at, timezone,
                             created_at, updated_at, reminder_updated_at, reminder_updated_by)
        VALUES (#{id}, #{tenantId}, #{customerId}, #{owner}, #{title}, #{description}, #{status},
                #{plannedStartTime}, #{plannedEndTime}, #{actualStartTime}, #{actualEndTime},
                #{cancelReason}, #{canceledBy}, #{canceledAt}, #{timezone},
                #{createdAt}, #{updatedAt}, #{reminderUpdatedAt}, #{reminderUpdatedBy})
    </insert>

    <update id="updatePlan" parameterType="com.bob.mta.modules.plan.persistence.PlanEntity">
        UPDATE mt_plan
        SET tenant_id           = #{tenantId},
            customer_id         = #{customerId},
            owner_id            = #{owner},
            title               = #{title},
            description         = #{description},
            status              = #{status},
            planned_start_time  = #{plannedStartTime},
            planned_end_time    = #{plannedEndTime},
            actual_start_time   = #{actualStartTime},
            actual_end_time     = #{actualEndTime},
            cancel_reason       = #{cancelReason},
            canceled_by         = #{canceledBy},
            canceled_at         = #{canceledAt},
            timezone            = #{timezone},
            created_at          = #{createdAt},
            updated_at          = #{updatedAt},
            reminder_updated_at = #{reminderUpdatedAt},
            reminder_updated_by = #{reminderUpdatedBy}
        WHERE plan_id = #{id}
    </update>

    <delete id="deletePlan" parameterType="string">
        DELETE FROM mt_plan WHERE plan_id = #{planId}
    </delete>

    <delete id="deleteParticipants" parameterType="string">
        DELETE FROM mt_plan_participant WHERE plan_id = #{planId}
    </delete>

    <insert id="insertParticipants">
        INSERT INTO mt_plan_participant (plan_id, participant_id)
        VALUES
        <foreach collection="participants" item="item" separator=",">
            (#{item.planId}, #{item.participantId})
        </foreach>
    </insert>

    <delete id="deleteNodes" parameterType="string">
        DELETE FROM mt_plan_node WHERE plan_id = #{planId}
    </delete>

    <insert id="insertNodes">
        INSERT INTO mt_plan_node (plan_id, node_id, parent_node_id, name, type, assignee, order_index,
                                  expected_duration_minutes, action_type, completion_threshold, action_ref, description)
        VALUES
        <foreach collection="nodes" item="item" separator=",">
            (#{item.planId}, #{item.nodeId}, #{item.parentNodeId}, #{item.name}, #{item.type}, #{item.assignee},
             #{item.orderIndex}, #{item.expectedDurationMinutes}, #{item.actionType}, #{item.completionThreshold},
             #{item.actionRef}, #{item.description})
        </foreach>
    </insert>

    <delete id="deleteExecutions" parameterType="string">
        DELETE FROM mt_plan_node_execution WHERE plan_id = #{planId}
    </delete>

    <insert id="insertExecutions">
        INSERT INTO mt_plan_node_execution (plan_id, node_id, status, start_time, end_time, operator_id,
                                            result_summary, execution_log)
        VALUES
        <foreach collection="executions" item="item" separator=",">
            (#{item.planId}, #{item.nodeId}, #{item.status}, #{item.startTime}, #{item.endTime}, #{item.operator},
             #{item.result}, #{item.log})
        </foreach>
    </insert>

    <delete id="deleteAttachments" parameterType="string">
        DELETE FROM mt_plan_node_attachment WHERE plan_id = #{planId}
    </delete>

    <insert id="insertAttachments">
        INSERT INTO mt_plan_node_attachment (plan_id, node_id, file_id)
        VALUES
        <foreach collection="attachments" item="item" separator=",">
            (#{item.planId}, #{item.nodeId}, #{item.fileId})
        </foreach>
    </insert>

    <delete id="deleteActivities" parameterType="string">
        DELETE FROM mt_plan_activity WHERE plan_id = #{planId}
    </delete>

    <insert id="insertActivities">
        INSERT INTO mt_plan_activity (plan_id, activity_id, activity_type, occurred_at, actor_id, message_key,
                                      reference_id, attributes)
        VALUES
        <foreach collection="activities" item="item" separator=",">
            (#{item.planId}, #{item.activityId}, #{item.type}, #{item.occurredAt}, #{item.actor}, #{item.message},
             #{item.referenceId},
             #{item.attributes, typeHandler=com.bob.mta.common.mybatis.StringMapJsonTypeHandler, jdbcType=OTHER})
        </foreach>
    </insert>

    <delete id="deleteReminderRules" parameterType="string">
        DELETE FROM mt_plan_reminder_rule WHERE plan_id = #{planId}
    </delete>

    <insert id="insertReminderRules">
        INSERT INTO mt_plan_reminder_rule (plan_id, rule_id, trigger, offset_minutes, channels, template_id,
                                           recipients, description, active)
        VALUES
        <foreach collection="rules" item="item" separator=",">
            (#{item.planId}, #{item.ruleId}, #{item.trigger}, #{item.offsetMinutes},
             #{item.channels, typeHandler=com.bob.mta.common.mybatis.StringListJsonTypeHandler, jdbcType=OTHER},
             #{item.templateId},
             #{item.recipients, typeHandler=com.bob.mta.common.mybatis.StringListJsonTypeHandler, jdbcType=OTHER},
             #{item.description},
             #{item.active})
        </foreach>
    </insert>

    <update id="updateReminderAudit">
        UPDATE mt_plan
        SET reminder_updated_at = #{updatedAt},
            reminder_updated_by = #{updatedBy},
            updated_at = COALESCE(#{updatedAt}, updated_at)
        WHERE plan_id = #{planId}
    </update>

    <select id="nextPlanId" resultType="string">
        SELECT CONCAT('PLAN-', LPAD(nextval('mt_plan_id_seq')::text, 8, '0'))
    </select>

    <select id="nextNodeId" resultType="string">
        SELECT CONCAT('NODE-', LPAD(nextval('mt_plan_node_id_seq')::text, 8, '0'))
    </select>

    <select id="nextReminderId" resultType="string">
        SELECT CONCAT('REM-', LPAD(nextval('mt_plan_reminder_id_seq')::text, 8, '0'))
    </select>
</mapper>
